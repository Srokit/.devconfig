" Stan Rokita's vimrc!

let mapleader=","

syntax off
filetype off
set nocompatible

function IsRemoteWork()
  return !empty($REMOTE_WORK)
endfunction

" vim-plug for plugin manager
call plug#begin('$DEVCONFIG/vim/plugged')

Plug 'pangloss/vim-javascript'    " JavaScript support
Plug 'leafgarland/typescript-vim' " TypeScript syntax
Plug 'maxmellon/vim-jsx-pretty'   " JS and JSX syntax

if !IsRemoteWork()
  Plug 'dense-analysis/ale'         " ALE shows linter wanrings and other things
endif

Plug 'preservim/nerdtree'         " NerdTree shows the tree of a directory

Plug 'jiangmiao/auto-pairs'       " Close parens of all kinds automatically

Plug 'tpope/vim-commentary'       " Comment and uncomment selections w/ 'gc'

Plug 'mattn/emmet-vim'            " Emmet makes writing html super fast

call plug#end()

" Autocomplete menus easier complete button
inoremap '' <C-N>

" turn beeping off
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" quick exit of modes
inoremap <leader><leader> <esc>
vnoremap <leader><leader> <esc>

" NERDTree Mapping
nnoremap <C-n> :NERDTree<cr>
nnoremap <leader>nf :NERDTreeFocus<cr>
nnoremap <leader>nt :NERDTreeToggle<cr>

" Ripped from online
" Start NERDTree when Vim is started without file arguments.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif

" Super fast save
nnoremap s :w<cr>

" Super fast quit
nnoremap q :q<cr>

" When using neovim the edit vim shortcut goes to the shim nvim vimrc which
" just sources the devconfig vimrc
let myvimrc = '$DEVCONFIG/vim/vimrc'

" for reloading vimscript
execute 'nnoremap <leader>ev :tabe<space>' . myvimrc . '<cr>'
nnoremap <leader>sv :source<space>$MYVIMRC<cr>

" work with tabs
nnoremap <leader>tn :tabnew<cr>
nnoremap <leader>tk :tabn<cr>
nnoremap <leader>te :tabe<space>
nnoremap <leader>tj :tabp<cr>

" switch panes
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l

" no *.swp files
set noswapfile

" copy paste stuff
set clipboard=unnamed
set backspace=2

" misc
set number
set ruler


" indentation
" round indentations to mults of shift width
set shiftround

" spaces > tabs
set expandtab

" new stuff i learned

" paste and leave content that was pasted in default register
" _ is the blackhole register and P pastes without touching registers
vnoremap <leader>p "_dP

" tenths of a second that previous matching paren will be highlighted
set matchtime=2
" activate the show prev paren feature
set showmatch

" keep visual selection aftering indenting
vnoremap < <gv
vnoremap > >gv

" move different distances
nnoremap K 10k
vnoremap K 10k
nnoremap J 10j
vnoremap J 10j

" put parentheses around white space seperated word
nnoremap <leader>" viw<esc>a"<esc>bi"<esc>lell

" put parenthese around curren visual selection
vnoremap <leader>" <esc>`<i"<esc>`>a"<esc>l

" instead of hard to reach 0 and $ (these do overmap presets)
nnoremap H ^
vnoremap H ^
nnoremap L $
vnoremap L $

" forcing myself to not use these
inoremap <esc> <nop>
vnoremap <esc> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
vnoremap <left> <nop>
vnoremap <right> <nop>
vnoremap <up> <nop>
vnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <bs> <nop>
vnoremap <bs> <nop>
nnoremap <del> <nop>

" Commands for RemoteWork api
command RemoteWorkClear call RemoteWorkClear()

" Functions below

function SetShift4()
    set shiftwidth=4
    set tabstop=4
    set softtabstop=4
endfunction

function SetShift2()
    set shiftwidth=2
    set tabstop=2
    set softtabstop=2
endfunction

" Default exapnd tabs to 2 spaces
call SetShift2()

augroup all_types
  au!
  " Remove trailing whitespace from file
  au BufWritePre * %s/\s\+$//e
augroup END

" May be overridden by one of the file specific auto commands
match ColorColumn "\%81v."

" File specific

augroup java_commands
  au!
  au BufNewFile,BufRead *.java setlocal shiftwidth=4 tabstop=4 softtabstop=4
  au BufNewFile,BufRead *.java match ColorColumn "\%101v."
augroup END

augroup python_commands
    au!
    " move operator for inside a python function
    " Ex: vif inside a python function will visually select everythin below the
    " def line and including the return statemnt
    au BufNewFile,BufRead *.py onoremap <buffer> if :<c-u>execute "normal! ?^\\def.*$\r/^\\s*return.*$\r$"<cr>
    au BufNewFile,BufRead *.py iabbrev <buffer> tt True
    au BufNewFile,BufRead *.py iabbrev <buffer> ff False
    au BufNewFile,BufRead *.py match ColorColumn "\%81v."
augroup END

" Use the command 'gq' to format certain parts of buffer
augroup prettier_as_formatter_commands
    au!
    au FileType javascript setlocal formatprg=prettier
    au FileType javascript.jsx setlocal formatprg=prettier
    au FileType html setlocal formatprg=js-beautify\ --type\ html
    au FileType scss setlocal formatprg=prettier\ --parser\ css
    au FileType html setlocal formatprg=prettier\ --parser\ css
augroup END

syntax on
filetype plugin indent on

colorscheme solarized
set background=dark

" To see a warning when we hit column 81
highlight ColorColumn cterm=bold ctermbg=1 ctermfg=7

" ALE settings
let g:ale_linters = {
\   'python': ['flake8', 'pylint'],
\   'javascript': ['eslint'],
\   'css': ['stylelint']
\}
let g:ale_fixers = {
\   'javascript': ['eslint'],
\   'html': ['pretter']
\}
let g:ale_fix_on_save = 1

" Other vim configurations
source $DEVCONFIG/vim/react.vim
