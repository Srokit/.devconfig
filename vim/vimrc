" Stan Rokita's vimrc!

let mapleader=","

syntax off
filetype off
set nocompatible

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

" Bracket and other paired chars completion
Plugin 'jiangmiao/auto-pairs'

Plugin 'ycm-core/YouCompleteMe'

call vundle#end()

if system("echo $(hostname)") =~ $USER . "\\.mtv.*"
  source /usr/share/vim/google/google.vim
endif

" To see a warning when we hit column 81
set colorcolumn=81

" turn beeping off
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" quick exit of modes
inoremap <leader><leader> <esc>
vnoremap <leader><leader> <esc>

" for reloading vimscript
nnoremap <leader>ev :tabf<space>$MYVIMRC<cr>
nnoremap <leader>sv :source<space>$MYVIMRC<cr>

" work with tabs
nnoremap <leader>tn :tabnew<cr>
nnoremap <leader>tk :tabn<cr>
nnoremap <leader>tj :tabp<cr>

" switch panes
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l

" no *.swp files
set noswapfile

" copy paste stuff
set clipboard=unnamed
set backspace=2

" misc
set number
set ruler


" indentation
" round indentations to mults of shift width
set shiftround

" spaces > tabs
set expandtab

" new stuff i learned

" paste and leave content that was pasted in default register
" _ is the blackhole register and P pastes without touching registers
vnoremap <leader>p "_dP

" tenths of a second that previous matching paren will be highlighted
set matchtime=2
" activate the show prev paren feature
set showmatch

" keep visual selection aftering indenting
vnoremap < <gv
vnoremap > >gv

" move different distances
nnoremap K 10k
vnoremap K 10k
nnoremap J 10j
vnoremap J 10j

" put parentheses around white space seperated word
nnoremap <leader>" viw<esc>a"<esc>bi"<esc>lell

" put parenthese around curren visual selection
vnoremap <leader>" <esc>`<i"<esc>`>a"<esc>l

" instead of hard to reach 0 and $ (these do overmap presets)
nnoremap H ^
vnoremap H ^
nnoremap L $
vnoremap L $

" forcing myself to not use these
inoremap <esc> <nop>
vnoremap <esc> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
vnoremap <left> <nop>
vnoremap <right> <nop>
vnoremap <up> <nop>
vnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <bs> <nop>
vnoremap <bs> <nop>
nnoremap <del> <nop>

" For RemoteWorkLocal api
nnoremap <leader>re :call RemoteWorkEdit('')<left><left>
nnoremap <leader>rp :call RemoteWorkPushThis()<cr>

" Show 80th column
match ColorColumn "\%80v."
set colorcolumn=80

" Functions below

function SetShift4()
    set shiftwidth=4
    set tabstop=4
    set softtabstop=4
endfunction

function SetShift2()
    set shiftwidth=2
    set tabstop=2
    set softtabstop=2
endfunction

function PullFileFromRemoteWork(remote_file, local_file)
  execute "!scpFromRemoteWork " . a:remote_file . " " . a:local_file
  return (v:shell_error == 0)
endfunction

function PushFileToRemoteWork(local_file, remote_file)
  execute "!scpToRemoteWork " . a:local_file . " " . a:remote_file
  return (v:shell_error == 0)
endfunction

function LocalAbsPathForRemoteWorkFile(file)
  return g:local_remote_work_top . a:file
endfunction

function RemoteAbsPathForRemoteWorkFile(file)
  return g:remote_remote_work_top . a:file
endfunction

function PullFileFromRemoteWorkRelativeToTop(file)
  return call PullFileFromRemoteWork(RemoteAbsPathForRemoteWorkFile(a:file), LocalAbsPathForRemoteWorkFile(a:file))
endfunction

function PushFileToRemoteWorkRelativeToTop(file)
  return call PushFileToRemoteWork(LocalAbsPathForRemoteWorkFile(a:file), RemoteAbsPathForRemoteWorkFile(a:file))
endfunction

function Mkdir(dir)
  execute "!mkdir " . a:dir
  return (v:shell_error == 0)
endfunction

function PathOnly(file)
  return substitute(a:file, "(.*/)", "", "")
endfunction

function ClearLocalRemoteWorkDir()
  execute "!rm -rf " . g:local_remote_work_top . "/*"
endfunction

function PullFileFromRemoteWorkAndOpen(file)
  call ClearLocalRemoteWorkDir()
  let l:local_file = LocalAbsPathForRemoteWorkFile(a:file)
  call Mkdir(PathOnly(l:local_file))
  let l:success = PullFileFromRemoteWorkRelativeToTop(a:file)
  let l:l:msg = ""
  if l:success
    let l:msg = l:msg . "Success"
  else
    let l:msg = l:msg . "Failure"
  endif
  let l:msg = l:msg . " when pulling file " . a:file
  echo l:msg
  execute "tabf" . l:local_file
endfunction

function PushCurrentFileToRemoteWork()
  let l:current_file = expand('%:p')
  let l:file = substitute(l:current_file, g:local_remote_work_top, "", "")
  let l:success = PushFileToRemoteWorkRelativeToTop(l:file)
  if l:success
    let l:msg = l:msg . "Success"
  else
    let l:msg = l:msg . "Failure"
  endif
  let l:msg = l:msg . " for file " . a:file
  echo l:msg
endfunction

function RemoteWorkEdit(file)
  call PullFileFromRemoteWorkAndOpen(a:file)
endfunction

function RemoteWorkPushThis()
  call PushCurrentFileToRemoteWork()
endfunction

" Set global remote work local path for push and pull
let g:local_remote_work_top = system('echo $LOCAL_REMOTE_WORK_TOP')

" Change this when root of local work should change
let g:remote_remote_work_top = "/ssd1/srok/android/sc-d1-dev"

" Default exapnd tabs to 2 spaces
call SetShift2()

" File specific

augroup java_commands
  au!
  au FileType java <buffer> call SetShift4()
augroup END

augroup python_commands
    au!
    " move operator for inside a python function
    " Ex: vif inside a python function will visually select everythin below the
    " def line and including the return statemnt
    au FileType python onoremap <buffer> if :<c-u>execute "normal! ?^\\def.*$\r/^\\s*return.*$\r$"<cr>
    au FileType python iabbrev <buffer> tt True
    au FileType python iabbrev <buffer> ff False
augroup END

syntax on
filetype plugin indent on

colorscheme solarized
set background=dark

" solarized makes ColorColumn a stupid color
hi ColorColumn ctermfg=Red

" Tell YCM to point to .ycm_extra_conf.py in home if it exists
if system("if ! fileExists .ycm_extra_conf.py; then; echo true; else; echo false; fi") == "true"
  let g:ycm_global_ycm_extra_conf="~/.ycm_extra_conf.py"
endif
